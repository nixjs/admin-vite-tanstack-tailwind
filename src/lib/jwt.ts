import { JwtPayload, jwtDecode } from 'jwt-decode'

/**
 * The function `isTokenExpired` checks if a given JWT token has expired.
 * @param {string} token - The `token` parameter is a string that represents a JSON Web Token (JWT).
 * @returns a boolean value. If the token is expired, it will return true. If the token is not expired
 * or if there is an error while decoding the token, it will return false.
 */
export function isTokenExpired(token: string): boolean {
  try {
    jwtDecode(token, { header: true })
    const d = jwtDecode(token)
    if (!d) throw new Error('Can not decode token')
    const { exp } = d as JwtPayload
    if (!exp) throw new Error('Token expired')
    return Number(exp) * 1000 < Date.now()
  } catch (error) {
    return true
  }
}

/**
 * The function `decodeAccessToken` decodes a JWT access token and returns its payload as a TypeScript
 * object, with an optional parameter to include the token's header.
 * @param {string} token - The `token` parameter is a string that represents the access token that you
 * want to decode. This token is typically generated by an authentication server and is used to
 * authenticate and authorize requests to protected resources.
 * @param {boolean} [header] - The `header` parameter is an optional boolean flag that indicates
 * whether the token includes the header information. If `header` is set to `true`, the function will
 * decode the token and return an object containing both the header and payload. If `header` is not
 * provided or set to `false`,
 * @returns The function `decodeAccessToken` returns a nullable object of type `T` or `null`.
 */
export function decodeAccessToken<T extends { [props: string]: any }>(
  token: string,
  header?: boolean
): T | null {
  try {
    if (header) return jwtDecode(token, { header: true })
    return jwtDecode(token)
  } catch (error) {
    return null
  }
}

/**
 * The function "setAuthorization" returns an object with an "authorization" property set to the value
 * of the input parameter.
 * @param {string} t - The parameter "t" in the setAuthorization function is a string that represents
 * the authorization token.
 * @returns An object with a property "authorization" set to the value of the input parameter "t".
 */
export function setAuthorization(t: string) {
  return { authorization: t }
}
